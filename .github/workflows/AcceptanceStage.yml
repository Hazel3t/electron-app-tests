name: Acceptance Stage

on:
  repository_dispatch:
    types: [fresh-artifact]
  workflow_dispatch:
    inputs:
      run_id:
        description: "The id of the workflow run where the desired download artifact was uploaded from."
        required: false
        type: number

permissions: write-all

jobs:
  fetch_run_id:
    name: Get Last Workflow Run ID
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.run_id.outputs.run_id }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Fetching last workflow Run ID
        id: run_id
        run: |
          is_valid_input=${{ github.event.client_payload.run_id || github.event.inputs.run_id }}
          if [[ -n "$is_valid_input" ]]; then
            run_id=$is_valid_input
          else
            response=$(gh api /repos/${{github.repository_owner}}/my-electron-app/actions/workflows/nightlyBuild.yml/runs?status=success&per_page=1)
            run_id=$(echo "$response" | jq -r '.workflow_runs[0].id | tonumber')
          fi
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

  cache-artifact:
    name: Cache Artifact
    runs-on: macos-latest
    needs: fetch_run_id
    steps:
      - name: Trying restore artifact cache
        uses: actions/cache/restore@v4
        id: cache-artifact-restore
        with:
          path: ./MongoDB Query Executor
          key: ${{ runner.os }}-cache-artifact-${{needs.fetch_run_id.outputs.run_id}}
      - name: Download Artifacts
        if: steps.cache-artifact-restore.outputs.cache-hit != 'true'
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{github.repository_owner}}/my-electron-app
          run-id: ${{needs.fetch_run_id.outputs.run_id}}
      - name: Save Cache
        id: cache-artifact-save
        if: steps.cache-artifact-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ./MongoDB Query Executor
          key: ${{ runner.os }}-cache-artifact-${{needs.fetch_run_id.outputs.run_id}}

  acceptance_env:
    name: Deploying artifacts to Acceptance Environment and run tests
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VITE_VERSION_API: localhost:8080/api/check-version
    needs: [fetch_run_id, cache-artifact]
    steps:
      - name: Github checkout
        uses: actions/checkout@v4

      - name: Restore Artifacts
        uses: actions/cache/restore@v4
        with:
          path: ./MongoDB Query Executor
          key: ${{ runner.os }}-cache-artifact-${{needs.fetch_run_id.outputs.run_id}}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Set Permissions to bash scripts
        run: chmod 755 ./automated_testing/*.sh

      - name: Run application installation
        run: ./automated_testing/install.sh

      - name: Start Mock services
        run: ./automated_testing/mock-end.sh

      - name: Run Smoke Tests and Health Checks
        run: npm run test:smoke

      - name: Run Acceptance Tests
        run: npm run test:acceptance

      - name: Stop Mock services
        run: ./automated_testing/mock-end.sh

  e2e_env:
    name: Deploying artifacts to E2E Environment and run tests
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: macos-latest
    needs: [fetch_run_id, cache-artifact]
    steps:
      - name: Github checkout
        uses: actions/checkout@v4

      - name: Restore Artifacts
        uses: actions/cache/restore@v4
        with:
          path: ./MongoDB Query Executor
          key: ${{ runner.os }}-cache-artifact-${{needs.fetch_run_id.outputs.run_id}}

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Set Permissions to bash scripts
        run: chmod 755 ./automated_testing/*.sh

      - name: Run application installation
        run: ./automated_testing/install.sh

      - name: Start Mock services
        run: ./automated_testing/mock-end.sh

      - name: Run Smoke Tests and Health Checks
        run: npm run test:smoke

      - name: Run External System Contract Tests
        run: ./automated_testing/external-system-contracts-test.sh

      - name: Run E2E Tests
        run: npm run test:e2e

      - name: Stop Mock services
        run: ./automated_testing/mock-end.sh

  acceptance_stage_badge:
    name: Create status badge for workflow
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [acceptance_env, e2e_env]
    steps:
      - name: E2E Environment badge (Success)
        if: ${{ !contains(needs.*.result, 'failure') }}
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: acceptance_stage
          LABEL: "Acceptance Stage"
          STATUS: "Success"
          COLOR: green
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: E2E Environment badge (Failure)
        if: ${{ contains(needs.*.result, 'failure') }}
        uses: RubbaBoy/BYOB@v1.3.0
        with:
          NAME: acceptance_stage
          LABEL: "Acceptance Stage"
          STATUS: "Failure"
          COLOR: red
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
